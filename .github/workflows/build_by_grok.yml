name: build by grok

on:
  schedule:
    - cron: '0 0 */2 * *'  # Every 2 days at 00:00 UTC
  workflow_dispatch:

permissions:
  contents: write

env:
  IMMORTALWRT_REPO: https://github.com/immortalwrt/immortalwrt
  IMMORTALWRT_BRANCH: openwrt-24.10

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Generate matrix
        id: generate-matrix
        run: |
          configs=$(ls *.config 2>/dev/null || true)
          matrix_json='{"include": []}'
          if [ -n "$configs" ]; then
            matrix_include=()
            for config in $configs; do
              owner_type="${config%.config}"
              owner="${owner_type%%;*}"
              type="${owner_type#*;}"
              matrix_include+=("{\"owner\": \"$owner\", \"type\": \"$type\", \"job_name\": \"${type}_for_${owner}\"}")
            done
            matrix_include_str=$(IFS=,; echo "${matrix_include[*]}")
            matrix_json="{\"include\": [$matrix_include_str]}"
          fi
          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT

  build:
    needs: discover
    if: ${{ needs.discover.outputs.matrix != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.discover.outputs.matrix) }}
      fail-fast: false
    continue-on-error: true # 一个配置失败不影响其他配置
    name: ${{ matrix.type }}_for_${{ matrix.owner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show system
        run: |
          echo -e "Total CPU cores\t: $(nproc)"
          cat /proc/cpuinfo | grep 'model name'
          free -h
          df -Th
          cpu_name=$(cat /proc/cpuinfo | grep "model name" | head -n 1 | awk -F: '{print $2}' | sed 's/^[ \t]*//')
          echo "CPU型号为${cpu_name}"
          
      - name: Setup build environment
        run: |
          sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "Asia/Shanghai"
          # sudo rm -f /swapfile /mnt/swapfile
          sudo docker image prune -a -f
          sudo systemctl stop docker
          sudo snap set system refresh.retain=2
          sudo apt-get -y purge firefox clang* ghc* google* llvm* mono* mongo* mysql* php*
          sudo apt-get -y autoremove --purge
          sudo apt-get clean
          sudo rm -rf /etc/mysql /etc/php /usr/lib/jvm /usr/libexec/docker /usr/local /usr/src/* /var/lib/docker /var/lib/gems /var/lib/mysql /var/lib/snapd /etc/skel /opt/{microsoft,az,hostedtoolcache,cni,mssql-tools,pipx} /usr/share/{az*,dotnet,swift,miniconda,gradle*,java,kotlinc,ri,sbt} /root/{.sbt,.local,.npm}
          # sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          rm -rf ~/{.cargo,.dotnet,.rustup}
          

      - name: Clone ImmortalWRT
        run: |
          df -Th
          git clone --depth 1 -b $IMMORTALWRT_BRANCH $IMMORTALWRT_REPO openwrt
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Run diy.sh if exists
        run: |
          if [ -f diy.sh ]; then
            cp diy.sh openwrt/diy.sh
            cd openwrt
            bash diy.sh
          fi

      - name: Prepare config
        run: |
          cp "${{ matrix.owner }};${{ matrix.type }}.config" openwrt/.config
          cd openwrt
          yes "" | make oldconfig
          echo "以下是最终生效的配置与您原始配置的差异（预期不应有重大差异）:"
          diff -u "../${{ matrix.owner }};${{ matrix.type }}.config" .config || true  # `|| true` 防止diff有差异时导致工作流失败
          

      - name: Download packages
        run: |
          cd openwrt
          make -j$(nproc) download V=s

      - name: Build firmware
        run: |
          cd openwrt
          make -j$(nproc) V=s

      - name: Collect firmware artifacts
        working-directory: ./openwrt/bin/targets
        run: |
          mkdir -p tmp_dir
          mkdir -p artifacts
          # 查找所有固件文件
          find . -name "*.bin" -o -name "*.img" -o -name "*.gz" -o -name "*.zip" -o -name "*.tar" | while read file; do
            cp "$file" tmp_dir/
          done
          rm ./tmp_dir/*kernel*
          rm ./tmp_dir/*rootfs*
          zipname="${{ matrix.type }}_for_${{ matrix.owner }}.zip"
          zip -r9 ./artifacts/$zipname ./tmp_dir/
          # 记录文件列表
          ls -la artifacts/ > file_list.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.type }}_for_${{ matrix.owner }}
          path: openwrt/bin/targets/artifacts/*.zip

  release:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Get build datetime
        id: datetime
        run: |
          TZ='Asia/Shanghai' date +'%Y-%m-%d_%H-%M-%S' > datetime.txt
          echo "datetime=$(cat datetime.txt)" >> $GITHUB_OUTPUT

      - name: Generate firmware list
        id: fwlist
        run: |
          echo "firmware_list<<EOF" >> $GITHUB_OUTPUT
          echo "| 文件名 | Owner | Type | 下载链接 |" >> $GITHUB_OUTPUT
          echo "|--------|-------|------|----------|" >> $GITHUB_OUTPUT
          for f in $(find ./artifacts -type f -name "*.zip"); do
            fname=$(basename "$f")
            type=$(echo "$fname" | cut -d'_' -f1)
            owner=$(echo "$fname" | sed -E 's/.*_for_([^.]+).zip/\1/')
            url="https://github.com/${{ github.repository }}/releases/download/固件编译于${{ steps.datetime.outputs.datetime }}/$fname"
            echo "| $fname | $owner | $type | [下载]($url) |" >> $GITHUB_OUTPUT
          done
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "固件编译于${{ steps.datetime.outputs.datetime }}"
          name: "固件编译于 ${{ steps.datetime.outputs.datetime }}"
          files: ./artifacts/**/**/*.zip
          body: |
            ![Build Date](https://img.shields.io/badge/编译日期-${{ steps.datetime.outputs.datetime }}-brightgreen)

            本次自动编译时间：${{ steps.datetime.outputs.datetime }}

            编译固件清单：
            ${{ steps.fwlist.outputs.firmware_list }}

            ---
            🔗 源码仓库: [immortalwrt/immortalwrt]( ${{ env.IMMORTALWRT_REPO }})  
            🌿 分支:  ${{ env.IMMORTALWRT_BRANCH }}  

            ℹ️ 本项目为自动编译仓库，每 2 天会使用 immortalwrt 最新源码进行一次固件编译，并自动发布 Release。
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Cleanup old releases (keep 5)
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          REPO: ${{ github.repository }}
        run: |
          api="https://api.github.com/repos/${REPO}/releases"
          releases_json=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" "${api}")
          ids_to_delete=$(echo "$releases_json" | jq -r 'sort_by(.created_at) | .[0:-5] | .[]?.id')
          for id in $ids_to_delete; do
            echo "Deleting release id: $id"
            curl -s -X DELETE -H "Authorization: token ${GITHUB_TOKEN}" "https://api.github.com/repos/${REPO}/releases/${id}"
          done
