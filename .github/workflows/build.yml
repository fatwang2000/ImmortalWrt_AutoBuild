name: build

env:
  CACHE_KEEP: 3   # 每个缓存前缀保留数量，可调整

on:
  schedule:
    - cron: "0 0 */2 * *"   # 每两天运行一次
  workflow_dispatch:        # 手动触发
  push:
    branches-ignore:
      - "**"               # 禁止代码更新自动触发

jobs:
  discover:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        run: |
          files=($(ls *.config || true))
          if [ ${#files[@]} -eq 0 ]; then
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            exit 0
          fi
          matrix="{\"include\":["
          for f in "${files[@]}"; do
            base="${f%.config}"
            owner="${base%%;*}"
            type="${base##*;}"
            matrix="${matrix}{\"file\":\"$f\",\"owner\":\"$owner\",\"type\":\"$type\"},"
          done
          matrix="${matrix%,}]}"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build:
    needs: discover
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.discover.outputs.matrix) }}
    name: Build ${{ matrix.type }} for ${{ matrix.owner }}
    steps:
      - uses: actions/checkout@v4
      - name: Prepare build environment
        run: sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'
      - name: Clone ImmortalWrt
        run: git clone --depth 1 -b master https://github.com/immortalwrt/immortalwrt.git openwrt

      # 恢复缓存
      - uses: actions/cache@v4
        with:
          path: openwrt/.ccache
          key: ccache-${{ matrix.owner }}-${{ matrix.type }}
          restore-keys: |
            ccache-${{ matrix.owner }}-${{ matrix.type }}
            ccache-
      - uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: dl-${{ matrix.owner }}-${{ matrix.type }}
          restore-keys: |
            dl-${{ matrix.owner }}-
            dl-
      - uses: actions/cache@v4
        with:
          path: openwrt/build_dir
          key: builddir-${{ matrix.owner }}-${{ matrix.type }}
          restore-keys: |
            builddir-${{ matrix.owner }}-
            builddir-
      - uses: actions/cache@v4
        with:
          path: openwrt/staging_dir
          key: stagingdir-${{ matrix.owner }}-${{ matrix.type }}
          restore-keys: |
            stagingdir-${{ matrix.owner }}-
            stagingdir-

      - name: Copy config
        run: cp "${{ github.workspace }}/${{ matrix.file }}" openwrt/.config
      - name: Copy diy.sh if exists
        run: |
          [ -f "${{ github.workspace }}/diy.sh" ] && cp "${{ github.workspace }}/diy.sh" openwrt/diy.sh

      - name: Update & install feeds
        working-directory: openwrt
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          [ -f diy.sh ] && bash diy.sh

      - name: Build firmware
        working-directory: openwrt
        run: |
          make defconfig
          JOBS=$(nproc || echo 2)
          make -j${JOBS} || make -j1 V=s

      - name: Package firmware
        working-directory: openwrt
        run: |
          mkdir -p ../firmware
          zipname="${{ matrix.type }}_for_${{ matrix.owner }}.zip"
          zip -r9 ../firmware/$zipname bin/targets/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware_${{ matrix.owner }}_${{ matrix.type }}
          path: firmware/*.zip

  release:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Get build datetime
        id: datetime
        run: |
          TZ='Asia/Shanghai' date +'%Y-%m-%d_%H-%M-%S' > datetime.txt
          echo "datetime=$(cat datetime.txt)" >> $GITHUB_OUTPUT

      - name: Generate firmware list
        id: fwlist
        run: |
          echo "firmware_list<<EOF" >> $GITHUB_OUTPUT
          echo "| 文件名 | Owner | Type | 下载链接 |" >> $GITHUB_OUTPUT
          echo "|--------|-------|------|----------|" >> $GITHUB_OUTPUT
          for f in $(find ./artifacts -type f -name "*.zip"); do
            fname=$(basename "$f")
            type=$(echo "$fname" | cut -d'_' -f1)
            owner=$(echo "$fname" | sed -E 's/.*_for_([^.]+).zip/\1/')
            url="https://github.com/${{ github.repository }}/releases/download/固件编译于${{ steps.datetime.outputs.datetime }}/$fname"
            echo "| $fname | $owner | $type | [下载]($url) |" >> $GITHUB_OUTPUT
          done
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "固件编译于${{ steps.datetime.outputs.datetime }}"
          name: "固件编译于 ${{ steps.datetime.outputs.datetime }}"
          files: ./artifacts/**/**/*.zip
          body: |
            ![Build Date](https://img.shields.io/badge/编译日期-${{ steps.datetime.outputs.datetime }}-brightgreen)

            本次自动编译时间：${{ steps.datetime.outputs.datetime }}

            编译固件清单：
            ${{ steps.fwlist.outputs.firmware_list }}

            ---
            🔗 源码仓库: [immortalwrt/immortalwrt](https://github.com/immortalwrt/immortalwrt)  
            🌿 分支: master  

            ℹ️ 本项目为自动编译仓库，每 2 天会使用 immortalwrt 最新源码进行一次固件编译，并自动发布 Release。
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Cleanup old releases (keep 5)
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          REPO: ${{ github.repository }}
        run: |
          api="https://api.github.com/repos/${REPO}/releases"
          releases_json=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" "${api}")
          ids_to_delete=$(echo "$releases_json" | jq -r 'sort_by(.created_at) | .[0:-5] | .[]?.id')
          for id in $ids_to_delete; do
            echo "Deleting release id: $id"
            curl -s -X DELETE -H "Authorization: token ${GITHUB_TOKEN}" "https://api.github.com/repos/${REPO}/releases/${id}"
          done

  cleanup-cache:
    needs: release
    runs-on: ubuntu-22.04
    steps:
      - name: Clean old caches (keep ${{ env.CACHE_KEEP }} per key prefix)
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          REPO: ${{ github.repository }}
          CACHE_KEEP: ${{ env.CACHE_KEEP }}
        run: |
          echo "Fetching cache list for $REPO"
          caches=$(gh api -H "Accept: application/vnd.github+json" \
            /repos/$REPO/actions/caches --paginate | jq -c '.actions_caches[]')

          for prefix in ccache dl builddir stagingdir; do
            echo "Processing prefix: $prefix"
            sorted=$(echo "$caches" | jq -r --arg pre "$prefix" \
              'select(.key | startswith($pre)) | [.created_at, .id] | @tsv' | sort)
            count=$(echo "$sorted" | wc -l)
            if [ "$count" -le "$CACHE_KEEP" ]; then
              echo "Caches for $prefix = $count, within limit ($CACHE_KEEP), skip"
              continue
            fi
            to_delete=$(echo "$sorted" | head -n -$CACHE_KEEP | awk '{print $2}')
            for id in $to_delete; do
             
