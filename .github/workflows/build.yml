name: ImmortalWrt matrix build & release

on:
  schedule:
    - cron: "0 0 */2 * *"   # 每两天运行一次
  workflow_dispatch:        # 手动触发
  push:
    branches-ignore:
      - "**"                # 禁止代码更新自动触发

jobs:
  discover:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - id: set-matrix
        run: |
          files=($(ls *.config || true))
          if [ ${#files[@]} -eq 0 ]; then
            echo "No config files found!"
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            exit 0
          fi
          matrix="{\"include\":["
          for f in "${files[@]}"; do
            base="${f%.config}"
            owner="${base%%;*}"
            type="${base##*;}"
            matrix="${matrix}{\"file\":\"$f\",\"owner\":\"$owner\",\"type\":\"$type\"},"
          done
          matrix="${matrix%,}]}"
          echo "matrix=$matrix"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build:
    needs: discover
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.discover.outputs.matrix) }}
    name: Build ${{ matrix.type }} for ${{ matrix.owner }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Prepare cache dirs
        run: |
          mkdir -p .ccache
          mkdir -p dl

      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ccache-${{ matrix.owner }}-${{ matrix.type }}-${{ github.run_id }}
          restore-keys: |
            ccache-${{ matrix.owner }}-${{ matrix.type }}-

      - name: Restore dl cache
        uses: actions/cache@v4
        with:
          path: dl
          key: dl-cache
          restore-keys: |
            dl-cache

      - name: Prepare build environment
        run: |
          sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'

      - name: Clone ImmortalWrt
        run: |
          git clone --depth 1 -b master https://github.com/immortalwrt/immortalwrt.git openwrt

      - name: Update & install feeds
        working-directory: openwrt
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Copy config
        run: |
          cp "${{ github.workspace }}/${{ matrix.file }}" openwrt/.config

      - name: Copy diy.sh if exists
        run: |
          if [ -f "${{ github.workspace }}/diy.sh" ]; then
            cp "${{ github.workspace }}/diy.sh" openwrt/diy.sh
            cd openwrt
            [ -f diy.sh ] && bash diy.sh
          fi
          
      - name: Build (make)
        working-directory: openwrt
        run: |
          make defconfig
          JOBS=$(nproc || echo 2)
          make -j${JOBS} || make -j1 V=s

      - name: Package firmware
        working-directory: openwrt
        run: |
          mkdir -p ../firmware
          zipname="${{ matrix.type }}_for_${{ matrix.owner }}.zip"
          zip -r9 ../firmware/$zipname bin/targets/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware_${{ matrix.owner }}_${{ matrix.type }}
          path: firmware/*.zip

  release:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List artifacts
        run: ls -lh ./artifacts

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: build-${{ github.run_number }}
          name: "Firmware build ${{ github.run_number }}"
          files: ./artifacts/**/**/*.zip
          body: "Auto firmware build"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}   # 使用 PAT，解决 403 问题

      - name: Cleanup old releases (keep 5)
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          REPO: ${{ github.repository }}
        run: |
          api="https://api.github.com/repos/${REPO}/releases"
          releases_json=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" "${api}")
          ids_to_delete=$(echo "$releases_json" | jq -r 'sort_by(.created_at) | .[0:-5] | .[]?.id')
          for id in $ids_to_delete; do
            echo "Deleting release id: $id"
            curl -s -X DELETE -H "Authorization: token ${GITHUB_TOKEN}" "https://api.github.com/repos/${REPO}/releases/${id}"
          done
