name: build by deepseek

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: '0 0 */2 * *' # 每2天运行一次

env:
  IMMORTALWRT_REPO: https://github.com/immortalwrt/immortalwrt
  IMMORTALWRT_BRANCH: openwrt-24.10

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      config_files: ${{ steps.find-configs.outputs.config_files }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find config files
        id: find-configs
        run: |
          # 查找所有.config文件并转换为JSON数组格式
          config_files=$(find . -name "*.config" -type f | jq -R -s -c 'split("\n") | map(select(. != ""))')
          echo "config_files=${config_files}" >> $GITHUB_OUTPUT

  build:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config_file: ${{ fromJSON(needs.setup.outputs.config_files) }}
    continue-on-error: true # 一个配置失败不影响其他配置
    name: build_${{ matrix.config_file }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Parse config filename
        id: parse-config
        run: |
          filename=$(basename "${{ matrix.config_file }}" .config)
          IFS=';' read -ra parts <<< "$filename"
          if [ ${#parts[@]} -ge 2 ]; then
            echo "config_owner=${parts[0]}" >> $GITHUB_OUTPUT
            echo "config_type=${parts[1]}" >> $GITHUB_OUTPUT
            echo "job_name=${parts[1]}_for_${parts[0]}" >> $GITHUB_OUTPUT
          else
            echo "Invalid config file name format: $filename"
            echo "Expected format: owner;type.config"
            exit 1
          fi

      - name: Set up build environment
        run: |
          sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'

      - name: Clone ImmortalWrt
        run: |
          git clone $IMMORTALWRT_REPO --branch=$IMMORTALWRT_BRANCH --depth=1 immortalwrt
          cd immortalwrt

      - name: Copy config file
        run: |
          cp "${{ matrix.config_file }}" immortalwrt/.config

      - name: Check and copy diy.sh if exists
        run: |
          if [ -f "diy.sh" ]; then
            echo "Copying diy.sh to build directory"
            cp diy.sh immortalwrt/
          else
            echo "diy.sh not found, skipping"
          fi

      - name: Setup feeds
        working-directory: ./immortalwrt
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Run diy.sh if exists
        working-directory: ./immortalwrt
        run: |
          if [ -f "diy.sh" ]; then
            echo "Running diy.sh"
            chmod +x diy.sh
            ./diy.sh
          else
            echo "diy.sh not found, skipping"
          fi

      #- name: Handle oldconfig
      #  working-directory: ./immortalwrt
      #  run: |
      #    make oldconfig

      - name: Build firmware
        working-directory: ./immortalwrt
        run: |
          make -j$(nproc) V=s

      - name: Collect firmware artifacts
        working-directory: ./immortalwrt/bin/targets
        run: |
          mkdir -p artifacts
          # 查找所有固件文件
          find . -name "*.bin" -o -name "*.img" -o -name "*.gz" -o -name "*.zip" -o -name "*.tar" | while read file; do
            cp "$file" artifacts/
          done
          
          # 记录文件列表
          ls -la artifacts/ > file_list.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.parse-config.outputs.job_name }}
          path: immortalwrt/bin/targets/artifacts/*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate firmware list
        id: generate-list
        run: |
          FIRMWARE_LIST=""
          for artifact_dir in ./artifacts/*/; do
            if [ -d "$artifact_dir" ]; then
              dir_name=$(basename "$artifact_dir")
              # 解析目录名格式为type_for_owner
              IFS='_' read -ra parts <<< "$dir_name"
              type="${parts[0]}"
              owner="${parts[2]}"
              
              for file in "$artifact_dir"/*; do
                if [ -f "$file" ]; then
                  filename=$(basename "$file")
                  FIRMWARE_LIST+="- **$owner** / $type / \`$filename\`\n"
                fi
              done
            fi
          done
          
          if [ -z "$FIRMWARE_LIST" ]; then
            FIRMWARE_LIST="本次编译未生成任何固件文件"
          fi
          
          echo "firmware_list<<EOF" >> $GITHUB_OUTPUT
          echo "$FIRMWARE_LIST" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get current date
        id: date
        run: |
          echo "current_date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "current_datetime=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "固件编译于${{ steps.date.outputs.current_datetime }}"
          name: "固件编译于${{ steps.date.outputs.current_datetime }}"
          body: |
            ![编译日期](https://img.shields.io/badge/编译日期-${{ steps.date.outputs.current_date }}-blue.svg)

            ## 📦 编译固件清单
            ${{ steps.generate-list.outputs.firmware_list }}

            ## 🏗️ 编译信息
            - **仓库**: ${{ env.IMMORTALWRT_REPO }}
            - **分支**: ${{ env.IMMORTALWRT_BRANCH }}
            - **编译时间**: ${{ steps.date.outputs.current_datetime }}

            ## ⚙️ 自动编译说明
            本项目每隔2天用最新源码进行自动编译，确保固件始终基于最新的代码和安全性更新。

            📌 **手动触发方式**: 在GitHub Actions页面选择build workflow，点击"Run workflow"按钮。

            > 🔄 定时编译: 每2天自动运行一次
            > 🚀 手动触发: 随时可以手动启动编译
            > 📊 编译状态: 独立编译每个配置，失败互不影响
          files: ./artifacts/**/*
          token: ${{ secrets.GH_PAT }}

      - name: Clean up old releases
        uses: dev-drprasad/delete-older-releases@v0.2.0
        with:
          keep_latest: 5
          delete_tag_pattern: "固件编译于*"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Show release info
        run: |
          echo "Release created successfully!"
          echo "Tag: 固件编译于${{ steps.date.outputs.current_datetime }}"
          echo "Firmware files uploaded:"
          find ./artifacts -type f -name "*" | while read file; do
            echo "  - $(basename "$file")"
          done
